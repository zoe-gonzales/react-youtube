{"version":3,"sources":["components/SearchBar.js","components/VideoDetail.js","components/VideoList.js","components/Title.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["ClearBtn","styled","span","_templateObject","StyleFormGroup","FormGroup","_templateObject2","SearchBar","state","term","handleInputChange","event","value","target","_this","setState","props","searchYouTube","_this2","this","react_default","a","createElement","Form","onSubmit","preventDefault","Label","for","hidden","Input","type","name","id","placeholder","onChange","onClick","Component","StyledH2","h2","VideoDetail_templateObject","VideoDetail","_ref","video","videoId","videoURL","concat","Fragment","className","src","allowFullScreen","snippet","title","description","List","ul","VideoList_templateObject","Item","li","VideoList_templateObject2","active","VideoList","children","VideoListItem","selectedVideo","chooseVideo","thumbnails","medium","url","Heading","h1","Title_templateObject","Title","dotenv","config","API","searchVideos","axios","get","params","key","process","part","q","maxResults","App","videos","then","res","data","items","catch","err","console","log","throttledSearch","_","debounce","Container","Row","Col","components_Title","components_SearchBar","md","components_VideoDetail","VideoList_VideoList","map","VideoList_VideoListItem","playlistId","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40032a7e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap';\nimport styled from 'styled-components';\n\nconst ClearBtn = styled.span`\n    color: #7D9995;\n    font-weight: 300;\n    font-size: 30px;\n    position: absolute;\n    top: -5px;\n    right: 10px;\n    cursor: pointer;\n\n    :hover {\n        color: #3BB29F;\n    }\n`\n// Another way to do styling of components grabbed from reactstrap - may not work with 100% of reactstrap components\nconst StyleFormGroup = styled(FormGroup)`\n    margin: 10px 0 20px 0;\n    position: relative;\n`\n\nclass SearchBar extends Component {\n    state = {\n        term: \"\"\n    }\n\n    handleInputChange = event => {\n        // console.log(event.target);\n        const { value } = event.target;\n        this.setState({ term: value });\n        this.props.searchYouTube(value);\n    }\n\n    render() {\n        return (\n            <Form onSubmit={event => event.preventDefault()}>\n                <StyleFormGroup>\n                    <Label for=\"search\" hidden>Search</Label>\n                    <Input \n                        type=\"text\" \n                        name=\"search\" \n                        id=\"search\" \n                        placeholder=\"Search\" \n                        value={this.state.term}\n                        onChange={this.handleInputChange}\n                    />\n                    <ClearBtn onClick={() => this.setState({term: \"\"})}>x</ClearBtn>\n                </StyleFormGroup>\n            </Form>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledH2 = styled.h2`\n    margin: 10px 0;\n`\n\n\nconst VideoDetail = ({ video }) => {\n    if (!video) {\n        return <p>Loading spinning goes here</p>\n    }\n    const videoId = video.id.videoId;\n    const videoURL = `https://www.youtube.com/embed/${videoId}?rel=0`;\n    \n    return (\n        <>\n            <div className=\"embed-responsive embed-responsive-16by9\">\n                <iframe className=\"embed-responsive-item\" src={videoURL} allowFullScreen></iframe>\n            </div>\n            <StyledH2>{video.snippet.title}</StyledH2>\n            <p>{video.snippet.description}</p>\n        </>\n    )\n}\n\nexport default VideoDetail;","import React from 'react';\nimport styled from 'styled-components';\n\nconst List = styled.ul`\n    padding: 0;\n    list-style-type: none;\n`\n\n// Item has one of following: active=true or active=false\nconst Item = styled.li`\n    img {\n        border: ${props => props.active ? \"4px solid #FFAAD6\" : \"none\"};\n        width: 200px;\n        margin-bottom: 15px;\n        cursor: pointer;\n        border-radius: 5px;\n\n        :hover {\n            border: 4px solid #3BB29F;\n        }\n    }\n`\n\nexport const VideoList = props => {\n    return (\n        <List>\n            {props.children}\n        </List>\n    )\n}\n\nexport const VideoListItem = ({ video, selectedVideo, chooseVideo }) => {\n    return (\n        <Item active={video === selectedVideo} onClick={() => chooseVideo(video)}>\n            <img src={video.snippet.thumbnails.medium.url} />\n        </Item>\n    )\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst Heading = styled.h1`\n    margin: 15px 0;\n    font-size: 40px;\n`\n\nconst Title = props => {\n    return (\n        <Heading>React YouTube Search!</Heading>\n    )\n}\n\nexport default Title;","import dotenv from 'dotenv';\nimport axios from 'axios';\ndotenv.config();\nconst apiKey = process.env.REACT_APP_KEY;\n\nexport default {\n    searchVideos: function(term) {\n        return axios.get(`https://www.googleapis.com/youtube/v3/search`, {\n            params: {\n                key: apiKey,\n                part: \"snippet\",\n                q: term,\n                maxResults: 8\n            }\n        })\n    }\n}","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport _ from 'lodash';\nimport SearchBar from './components/SearchBar';\nimport VideoDetail from './components/VideoDetail';\nimport {VideoList, VideoListItem} from './components/VideoList';\nimport Title from './components/Title';\nimport API from './utils/API';\nimport styled from 'styled-components';\n\nclass App extends Component {\n  /* Storing information retrieved from API */\n  state = {\n    videos: [],\n    selectedVideo: null\n  }\n\n  componentDidMount() {\n    this.searchYouTube(\"kittens\");\n  }\n\n  searchYouTube = term => {\n    API.searchVideos(term)\n      .then(res => this.setState({videos: res.data.items, selectedVideo: res.data.items[0]}))\n      .catch(err => console.log(err));\n  }\n\n  chooseVideo = video => {\n    this.setState({ selectedVideo: video});\n  }\n\n  throttledSearch = _.debounce(this.searchYouTube, 600);\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Title />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <SearchBar searchYouTube={this.throttledSearch}/>\n          </Col>\n        </Row>\n        <Row>\n            <Col md=\"9\">\n              <VideoDetail video={this.state.selectedVideo}/>\n            </Col> \n            <Col md=\"3\">\n              <VideoList>\n                {this.state.videos.map(video => (\n                  <VideoListItem \n                    video={video} \n                    key={video.id.videoId || video.id.playlistId}\n                    selectedVideo={this.state.selectedVideo}\n                    chooseVideo={this.chooseVideo}\n                  />\n                ))}\n              </VideoList>\n            </Col>\n        </Row>\n      </Container>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}